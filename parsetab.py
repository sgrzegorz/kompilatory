
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEnonassocASSIGNADDASSIGNMINASSIGNMULASSIGNDIVASSIGNRELASSIGNleftADDMINDOTADDDOTMINleftMULDIVDOTMULDOTDIVleftLTGTLTEGTENEleft(){}nonassocTRANSPOSErightUMINUSADD ADDASSIGN ASSIGN BREAK COM CONTINUE DIV DIVASSIGN DOTADD DOTDIV DOTMIN DOTMUL ELSE EYE FLOAT FOR GT GTE ID IF IGN INT LT LTE MIN MINASSIGN MUL MULASSIGN NE NL ONES PRINT RELASSIGN RETURN STR TRANSPOSE WHILE ZEROSprogram : instructions_optinstructions_opt : instructionsinstructions_opt : instructions : instructions instruction\n                    | instruction block : '{' instructions '}' instruction : block\n                    | if\n                    | for\n                    | while\n                    | break ';'\n                    | continue ';'\n                    | return ';'\n                    | print ';'\n                    | assign ';'if : IF BOOLEAN_IN_PARENTHESES instruction %prec IFX\n          | IF BOOLEAN_IN_PARENTHESES instruction ELSE instructionfor :  FOR ID ASSIGN RANGE instruction RANGE : EXPRESSION ':' EXPRESSIONwhile : WHILE BOOLEAN_IN_PARENTHESES instruction break : BREAK continue : CONTINUE return : RETURN\n              | RETURN EXPRESSION\n              | RETURN BOOLEAN_EXPRESSIONassign : ID ASSIGN EXPRESSIONassign : ID ADDASSIGN EXPRESSION\n              | ID MINASSIGN EXPRESSION\n              | ID MULASSIGN EXPRESSION\n              | ID DIVASSIGN EXPRESSION assign : ID '[' INT  ',' INT ']' ASSIGN EXPRESSIONBOOLEAN_EXPRESSION : EXPRESSION LT EXPRESSION\n                          | EXPRESSION GT EXPRESSION\n                          | EXPRESSION LTE EXPRESSION\n                          | EXPRESSION GTE EXPRESSION\n                          | EXPRESSION NE EXPRESSION\n                          | EXPRESSION RELASSIGN EXPRESSIONEXPRESSION : EXPRESSION ADD EXPRESSION\n                  | EXPRESSION MIN EXPRESSION\n                  | EXPRESSION MUL EXPRESSION\n                  | EXPRESSION DIV EXPRESSIONEXPRESSION : EXPRESSION DOTADD EXPRESSION\n                  | EXPRESSION DOTMIN EXPRESSION\n                  | EXPRESSION DOTMUL EXPRESSION\n                  | EXPRESSION DOTDIV EXPRESSIONEXPRESSION : MIN EXPRESSION %prec UMINUSEXPRESSION : EXPRESSION TRANSPOSEEXPRESSION : MATRIX\n                | MATRIX_FUNCTIONS\n                | NUMBEREXPRESSION : STREXPRESSION : IDNUMBER : INT\n              | FLOATMATRIX : '[' ROWS ']' ROWS : ROWS ';' ROW\n             | ROW ROW : ROW ',' EXPRESSION\n            | EXPRESSIONMATRIX_FUNCTIONS : EYE '(' MULTIPLE_EXPR ')'\n                         | ZEROS '(' MULTIPLE_EXPR ')'\n                         | ONES '(' MULTIPLE_EXPR ')'BOOLEAN_IN_PARENTHESES : '(' BOOLEAN_EXPRESSION ')'MULTIPLE_EXPR : MULTIPLE_EXPR ',' EXPRESSION\n                  | EXPRESSIONprint : PRINT MULTIPLE_EXPR "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,23,24,25,26,27,28,56,57,67,117,118,],[-3,0,-1,-2,-5,-7,-8,-9,-10,-4,-11,-12,-13,-14,-15,-6,-16,-20,-17,-18,]),'{':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[14,14,-5,-7,-8,-9,-10,14,-4,-11,-12,-13,-14,-15,14,14,14,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,14,-63,14,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'IF':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[15,15,-5,-7,-8,-9,-10,15,-4,-11,-12,-13,-14,-15,15,15,15,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,15,-63,15,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'FOR':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[16,16,-5,-7,-8,-9,-10,16,-4,-11,-12,-13,-14,-15,16,16,16,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,16,-63,16,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'WHILE':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[18,18,-5,-7,-8,-9,-10,18,-4,-11,-12,-13,-14,-15,18,18,18,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,18,-63,18,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'BREAK':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[19,19,-5,-7,-8,-9,-10,19,-4,-11,-12,-13,-14,-15,19,19,19,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,19,-63,19,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'CONTINUE':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[20,20,-5,-7,-8,-9,-10,20,-4,-11,-12,-13,-14,-15,20,20,20,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,20,-63,20,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'RETURN':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[21,21,-5,-7,-8,-9,-10,21,-4,-11,-12,-13,-14,-15,21,21,21,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,21,-63,21,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'PRINT':([0,3,4,5,6,7,8,14,23,24,25,26,27,28,29,30,39,43,44,45,46,47,52,53,56,57,67,76,83,91,92,93,96,97,98,99,100,101,102,103,110,117,118,123,124,125,126,],[22,22,-5,-7,-8,-9,-10,22,-4,-11,-12,-13,-14,-15,22,22,22,-48,-49,-50,-51,-52,-53,-54,-6,-16,-20,-47,-46,22,-63,22,-38,-39,-40,-41,-42,-43,-44,-45,-55,-17,-18,-60,-61,-62,-19,]),'ID':([0,3,4,5,6,7,8,14,16,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,39,42,43,44,45,46,47,48,52,53,56,57,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,96,97,98,99,100,101,102,103,110,111,112,117,118,119,123,124,125,126,128,],[17,17,-5,-7,-8,-9,-10,17,32,47,47,-4,-11,-12,-13,-14,-15,17,17,47,47,47,47,47,47,17,47,-48,-49,-50,-51,-52,47,-53,-54,-6,-16,47,-20,47,47,47,47,47,47,47,47,-47,47,47,47,47,47,47,-46,47,47,47,47,17,-63,17,-38,-39,-40,-41,-42,-43,-44,-45,-55,47,47,-17,-18,47,-60,-61,-62,-19,47,]),'}':([4,5,6,7,8,23,24,25,26,27,28,29,56,57,67,117,118,],[-5,-7,-8,-9,-10,-4,-11,-12,-13,-14,-15,56,-6,-16,-20,-17,-18,]),'ELSE':([5,6,7,8,24,25,26,27,28,56,57,67,117,118,],[-7,-8,-9,-10,-11,-12,-13,-14,-15,-6,91,-20,-17,-18,]),';':([9,10,11,12,13,19,20,21,40,41,43,44,45,46,47,52,53,54,55,61,62,63,64,65,76,83,84,85,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,121,122,123,124,125,129,],[24,25,26,27,28,-21,-22,-23,-24,-25,-48,-49,-50,-51,-52,-53,-54,-66,-65,-26,-27,-28,-29,-30,-47,-46,111,-57,-59,-38,-39,-40,-41,-42,-43,-44,-45,-32,-33,-34,-35,-36,-37,-55,-64,-56,-58,-60,-61,-62,-31,]),'(':([15,18,49,50,51,],[31,31,87,88,89,]),'ASSIGN':([17,32,127,],[33,60,128,]),'ADDASSIGN':([17,],[34,]),'MINASSIGN':([17,],[35,]),'MULASSIGN':([17,],[36,]),'DIVASSIGN':([17,],[37,]),'[':([17,21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[38,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'MIN':([21,22,31,33,34,35,36,37,40,42,43,44,45,46,47,48,52,53,55,59,60,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,119,122,123,124,125,126,128,129,],[42,42,42,42,42,42,42,42,69,42,-48,-49,-50,-51,-52,42,-53,-54,69,69,42,69,69,69,69,69,42,42,42,42,42,42,42,42,-47,42,42,42,42,42,42,-46,69,42,42,42,42,69,-38,-39,-40,-41,-42,-43,-44,-45,69,69,69,69,69,69,-55,42,42,69,42,69,-60,-61,-62,69,42,69,]),'STR':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'EYE':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'ZEROS':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ONES':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'INT':([21,22,31,33,34,35,36,37,38,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,95,111,112,119,128,],[52,52,52,52,52,52,52,52,66,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,120,52,52,52,52,]),'FLOAT':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ADD':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[68,-48,-49,-50,-51,-52,-53,-54,68,68,68,68,68,68,68,-47,-46,68,68,-38,-39,-40,-41,-42,-43,-44,-45,68,68,68,68,68,68,-55,68,68,-60,-61,-62,68,68,]),'MUL':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[70,-48,-49,-50,-51,-52,-53,-54,70,70,70,70,70,70,70,-47,-46,70,70,70,70,-40,-41,70,70,-44,-45,70,70,70,70,70,70,-55,70,70,-60,-61,-62,70,70,]),'DIV':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[71,-48,-49,-50,-51,-52,-53,-54,71,71,71,71,71,71,71,-47,-46,71,71,71,71,-40,-41,71,71,-44,-45,71,71,71,71,71,71,-55,71,71,-60,-61,-62,71,71,]),'DOTADD':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[72,-48,-49,-50,-51,-52,-53,-54,72,72,72,72,72,72,72,-47,-46,72,72,-38,-39,-40,-41,-42,-43,-44,-45,72,72,72,72,72,72,-55,72,72,-60,-61,-62,72,72,]),'DOTMIN':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[73,-48,-49,-50,-51,-52,-53,-54,73,73,73,73,73,73,73,-47,-46,73,73,-38,-39,-40,-41,-42,-43,-44,-45,73,73,73,73,73,73,-55,73,73,-60,-61,-62,73,73,]),'DOTMUL':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[74,-48,-49,-50,-51,-52,-53,-54,74,74,74,74,74,74,74,-47,-46,74,74,74,74,-40,-41,74,74,-44,-45,74,74,74,74,74,74,-55,74,74,-60,-61,-62,74,74,]),'DOTDIV':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[75,-48,-49,-50,-51,-52,-53,-54,75,75,75,75,75,75,75,-47,-46,75,75,75,75,-40,-41,75,75,-44,-45,75,75,75,75,75,75,-55,75,75,-60,-61,-62,75,75,]),'TRANSPOSE':([40,43,44,45,46,47,52,53,55,59,61,62,63,64,65,76,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,122,123,124,125,126,129,],[76,-48,-49,-50,-51,-52,-53,-54,76,76,76,76,76,76,76,-47,-46,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-55,76,76,-60,-61,-62,76,76,]),'LT':([40,43,44,45,46,47,52,53,59,76,83,96,97,98,99,100,101,102,103,110,123,124,125,],[77,-48,-49,-50,-51,-52,-53,-54,77,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),'GT':([40,43,44,45,46,47,52,53,59,76,83,96,97,98,99,100,101,102,103,110,123,124,125,],[78,-48,-49,-50,-51,-52,-53,-54,78,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),'LTE':([40,43,44,45,46,47,52,53,59,76,83,96,97,98,99,100,101,102,103,110,123,124,125,],[79,-48,-49,-50,-51,-52,-53,-54,79,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),'GTE':([40,43,44,45,46,47,52,53,59,76,83,96,97,98,99,100,101,102,103,110,123,124,125,],[80,-48,-49,-50,-51,-52,-53,-54,80,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),'NE':([40,43,44,45,46,47,52,53,59,76,83,96,97,98,99,100,101,102,103,110,123,124,125,],[81,-48,-49,-50,-51,-52,-53,-54,81,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),'RELASSIGN':([40,43,44,45,46,47,52,53,59,76,83,96,97,98,99,100,101,102,103,110,123,124,125,],[82,-48,-49,-50,-51,-52,-53,-54,82,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),',':([43,44,45,46,47,52,53,54,55,66,76,83,85,86,96,97,98,99,100,101,102,103,110,113,114,115,116,121,122,123,124,125,],[-48,-49,-50,-51,-52,-53,-54,90,-65,95,-47,-46,112,-59,-38,-39,-40,-41,-42,-43,-44,-45,-55,90,90,90,-64,112,-58,-60,-61,-62,]),']':([43,44,45,46,47,52,53,76,83,84,85,86,96,97,98,99,100,101,102,103,110,120,121,122,123,124,125,],[-48,-49,-50,-51,-52,-53,-54,-47,-46,110,-57,-59,-38,-39,-40,-41,-42,-43,-44,-45,-55,127,-56,-58,-60,-61,-62,]),':':([43,44,45,46,47,52,53,76,83,94,96,97,98,99,100,101,102,103,110,123,124,125,],[-48,-49,-50,-51,-52,-53,-54,-47,-46,119,-38,-39,-40,-41,-42,-43,-44,-45,-55,-60,-61,-62,]),')':([43,44,45,46,47,52,53,55,58,76,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,114,115,116,123,124,125,],[-48,-49,-50,-51,-52,-53,-54,-65,92,-47,-46,-38,-39,-40,-41,-42,-43,-44,-45,-32,-33,-34,-35,-36,-37,-55,123,124,125,-64,-60,-61,-62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,14,],[3,29,]),'instruction':([0,3,14,29,30,39,91,93,],[4,23,4,23,57,67,117,118,]),'block':([0,3,14,29,30,39,91,93,],[5,5,5,5,5,5,5,5,]),'if':([0,3,14,29,30,39,91,93,],[6,6,6,6,6,6,6,6,]),'for':([0,3,14,29,30,39,91,93,],[7,7,7,7,7,7,7,7,]),'while':([0,3,14,29,30,39,91,93,],[8,8,8,8,8,8,8,8,]),'break':([0,3,14,29,30,39,91,93,],[9,9,9,9,9,9,9,9,]),'continue':([0,3,14,29,30,39,91,93,],[10,10,10,10,10,10,10,10,]),'return':([0,3,14,29,30,39,91,93,],[11,11,11,11,11,11,11,11,]),'print':([0,3,14,29,30,39,91,93,],[12,12,12,12,12,12,12,12,]),'assign':([0,3,14,29,30,39,91,93,],[13,13,13,13,13,13,13,13,]),'BOOLEAN_IN_PARENTHESES':([15,18,],[30,39,]),'EXPRESSION':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[40,55,59,61,62,63,64,65,83,86,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,55,55,55,116,86,122,126,129,]),'BOOLEAN_EXPRESSION':([21,31,],[41,58,]),'MATRIX':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'MATRIX_FUNCTIONS':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NUMBER':([21,22,31,33,34,35,36,37,42,48,60,68,69,70,71,72,73,74,75,77,78,79,80,81,82,87,88,89,90,111,112,119,128,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'MULTIPLE_EXPR':([22,87,88,89,],[54,113,114,115,]),'ROWS':([48,],[84,]),'ROW':([48,111,],[85,121,]),'RANGE':([60,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',23),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt','Mparser.py',28),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt2','Mparser.py',34),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',40),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',41),
  ('block -> { instructions }','block',3,'p_block','Mparser.py',52),
  ('instruction -> block','instruction',1,'p_instruction','Mparser.py',57),
  ('instruction -> if','instruction',1,'p_instruction','Mparser.py',58),
  ('instruction -> for','instruction',1,'p_instruction','Mparser.py',59),
  ('instruction -> while','instruction',1,'p_instruction','Mparser.py',60),
  ('instruction -> break ;','instruction',2,'p_instruction','Mparser.py',61),
  ('instruction -> continue ;','instruction',2,'p_instruction','Mparser.py',62),
  ('instruction -> return ;','instruction',2,'p_instruction','Mparser.py',63),
  ('instruction -> print ;','instruction',2,'p_instruction','Mparser.py',64),
  ('instruction -> assign ;','instruction',2,'p_instruction','Mparser.py',65),
  ('if -> IF BOOLEAN_IN_PARENTHESES instruction','if',3,'p_if','Mparser.py',70),
  ('if -> IF BOOLEAN_IN_PARENTHESES instruction ELSE instruction','if',5,'p_if','Mparser.py',71),
  ('for -> FOR ID ASSIGN RANGE instruction','for',5,'p_for','Mparser.py',80),
  ('RANGE -> EXPRESSION : EXPRESSION','RANGE',3,'p_range1','Mparser.py',88),
  ('while -> WHILE BOOLEAN_IN_PARENTHESES instruction','while',3,'p_while','Mparser.py',94),
  ('break -> BREAK','break',1,'p_break','Mparser.py',100),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',106),
  ('return -> RETURN','return',1,'p_return','Mparser.py',112),
  ('return -> RETURN EXPRESSION','return',2,'p_return','Mparser.py',113),
  ('return -> RETURN BOOLEAN_EXPRESSION','return',2,'p_return','Mparser.py',114),
  ('assign -> ID ASSIGN EXPRESSION','assign',3,'p_expression_assignment','Mparser.py',124),
  ('assign -> ID ADDASSIGN EXPRESSION','assign',3,'p_expression_assignment1','Mparser.py',129),
  ('assign -> ID MINASSIGN EXPRESSION','assign',3,'p_expression_assignment1','Mparser.py',130),
  ('assign -> ID MULASSIGN EXPRESSION','assign',3,'p_expression_assignment1','Mparser.py',131),
  ('assign -> ID DIVASSIGN EXPRESSION','assign',3,'p_expression_assignment1','Mparser.py',132),
  ('assign -> ID [ INT , INT ] ASSIGN EXPRESSION','assign',8,'p_expression_assignment_ref','Mparser.py',138),
  ('BOOLEAN_EXPRESSION -> EXPRESSION LT EXPRESSION','BOOLEAN_EXPRESSION',3,'p_expression_rel','Mparser.py',147),
  ('BOOLEAN_EXPRESSION -> EXPRESSION GT EXPRESSION','BOOLEAN_EXPRESSION',3,'p_expression_rel','Mparser.py',148),
  ('BOOLEAN_EXPRESSION -> EXPRESSION LTE EXPRESSION','BOOLEAN_EXPRESSION',3,'p_expression_rel','Mparser.py',149),
  ('BOOLEAN_EXPRESSION -> EXPRESSION GTE EXPRESSION','BOOLEAN_EXPRESSION',3,'p_expression_rel','Mparser.py',150),
  ('BOOLEAN_EXPRESSION -> EXPRESSION NE EXPRESSION','BOOLEAN_EXPRESSION',3,'p_expression_rel','Mparser.py',151),
  ('BOOLEAN_EXPRESSION -> EXPRESSION RELASSIGN EXPRESSION','BOOLEAN_EXPRESSION',3,'p_expression_rel','Mparser.py',152),
  ('EXPRESSION -> EXPRESSION ADD EXPRESSION','EXPRESSION',3,'p_expression_sum','Mparser.py',159),
  ('EXPRESSION -> EXPRESSION MIN EXPRESSION','EXPRESSION',3,'p_expression_sum','Mparser.py',160),
  ('EXPRESSION -> EXPRESSION MUL EXPRESSION','EXPRESSION',3,'p_expression_sum','Mparser.py',161),
  ('EXPRESSION -> EXPRESSION DIV EXPRESSION','EXPRESSION',3,'p_expression_sum','Mparser.py',162),
  ('EXPRESSION -> EXPRESSION DOTADD EXPRESSION','EXPRESSION',3,'p_expression_mul','Mparser.py',168),
  ('EXPRESSION -> EXPRESSION DOTMIN EXPRESSION','EXPRESSION',3,'p_expression_mul','Mparser.py',169),
  ('EXPRESSION -> EXPRESSION DOTMUL EXPRESSION','EXPRESSION',3,'p_expression_mul','Mparser.py',170),
  ('EXPRESSION -> EXPRESSION DOTDIV EXPRESSION','EXPRESSION',3,'p_expression_mul','Mparser.py',171),
  ('EXPRESSION -> MIN EXPRESSION','EXPRESSION',2,'p_expr_uminus','Mparser.py',177),
  ('EXPRESSION -> EXPRESSION TRANSPOSE','EXPRESSION',2,'p_transpose','Mparser.py',184),
  ('EXPRESSION -> MATRIX','EXPRESSION',1,'p_expression_1','Mparser.py',195),
  ('EXPRESSION -> MATRIX_FUNCTIONS','EXPRESSION',1,'p_expression_1','Mparser.py',196),
  ('EXPRESSION -> NUMBER','EXPRESSION',1,'p_expression_1','Mparser.py',197),
  ('EXPRESSION -> STR','EXPRESSION',1,'p_expression_2','Mparser.py',202),
  ('EXPRESSION -> ID','EXPRESSION',1,'p_expression_3','Mparser.py',208),
  ('NUMBER -> INT','NUMBER',1,'p_number_int','Mparser.py',214),
  ('NUMBER -> FLOAT','NUMBER',1,'p_number_int','Mparser.py',215),
  ('MATRIX -> [ ROWS ]','MATRIX',3,'p_matrix','Mparser.py',221),
  ('ROWS -> ROWS ; ROW','ROWS',3,'p_matrix_rows','Mparser.py',227),
  ('ROWS -> ROW','ROWS',1,'p_matrix_rows','Mparser.py',228),
  ('ROW -> ROW , EXPRESSION','ROW',3,'p_matrix_row','Mparser.py',238),
  ('ROW -> EXPRESSION','ROW',1,'p_matrix_row','Mparser.py',239),
  ('MATRIX_FUNCTIONS -> EYE ( MULTIPLE_EXPR )','MATRIX_FUNCTIONS',4,'p_expression_matrix_functions','Mparser.py',249),
  ('MATRIX_FUNCTIONS -> ZEROS ( MULTIPLE_EXPR )','MATRIX_FUNCTIONS',4,'p_expression_matrix_functions','Mparser.py',250),
  ('MATRIX_FUNCTIONS -> ONES ( MULTIPLE_EXPR )','MATRIX_FUNCTIONS',4,'p_expression_matrix_functions','Mparser.py',251),
  ('BOOLEAN_IN_PARENTHESES -> ( BOOLEAN_EXPRESSION )','BOOLEAN_IN_PARENTHESES',3,'p_boolean_in_parentheses','Mparser.py',258),
  ('MULTIPLE_EXPR -> MULTIPLE_EXPR , EXPRESSION','MULTIPLE_EXPR',3,'p_multiple_expression','Mparser.py',263),
  ('MULTIPLE_EXPR -> EXPRESSION','MULTIPLE_EXPR',1,'p_multiple_expression','Mparser.py',264),
  ('print -> PRINT MULTIPLE_EXPR','print',2,'p_print','Mparser.py',273),
]
